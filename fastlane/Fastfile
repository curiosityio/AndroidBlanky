require 'dotenv'
Dotenv.load("../.env")

def get_env(name)
  value = ENV[name]
  raise "Forgot to define #{name} in environment variables" unless value 

  return value 
end 

env = {
  :app_name => get_env("APP_NAME"),
  :app_icon_badge => get_env("APP_ICON_BADGE")
}

build_tools_version = "29.0.2"

platform :android do
  before_all do
    ENV["RELEASE"] = "true"
  end

  lane :deploy do |values|
    UI.user_error!('Not on CI') unless ENV["CI"]

    generate_icons()

    changelog = File.read("./release_notes.txt")    
    description = File.read("./metadata/android/en-US/description.txt")    
    buildVersion = Time.now.to_i.to_s
    versionOfApp = android_get_version_name()
    latest_demo = File.read('./latest_demo.txt')
    developer_email = get_env("DEVELOPER_EMAIL")
    
    if ENV["TRAVIS_TAG"].end_with?("-beta")
      deploy_app_store("beta", buildVersion) 
      
      message = [      
        "Android: #{env[:app_name]} Beta v#{versionOfApp}, build: #{buildVersion} ready for download.",        
        "\n",
        "Link to demo and notes for release:",
        latest_demo,
        "\n",
        "Note: this is an automated message. Please email #{developer_email} if you have questions."
      ].join("\n") + "\n"

      notify_app_update("#{env[:app_name]} Beta updated. (v#{versionOfApp}, Android)", message)
    else
      create_screenshots()
      deploy_app_store("production", buildVersion)

      message = [      
        "Android: #{env[:app_name]} v#{versionOfApp}, build: #{buildVersion} has been submitted to the Google PlayStore",
        "\n",
        "Link to demo and notes for release:",
        latest_demo,
        "\n",
        "Note: this is an automated message. Please email #{developer_email} if you have questions."
      ].join("\n") + "\n"

      notify_app_update("#{env[:app_name]} submitted for review. (v#{versionOfApp}, Android)", message)
    end     
  end 
  
  # track = "beta", "production"
  def deploy_app_store(track, version_code)
    changelog = File.read("../release_notes.txt")
    android_set_version_code(version_code: version_code)
    File.open('metadata/android/en-US/changelogs/' + android_get_version_code().to_s + '.txt', 'w') { |file| file.write(changelog) }

    gradle(task: ":app:bundleProductionRelease")

    upload_to_play_store(aab: "app/build/outputs/bundle/productionRelease/app.aab",
               mapping: 'app/build/outputs/mapping/production/release/mapping.txt',
               package_name: prod_package_name,
               metadata_path: "./fastlane/metadata/android/en-US/",
               json_key: './fastlane/metadata/google_play_dev.json',
               track: track)               
  end

  desc "Create screenshots used for the Play Store"
    lane :create_screenshots do
      capture_android_screenshots(
        locales: ['en-US'],
        clear_previous_screenshots: true,
        app_apk_path: "app/build/outputs/apk/development/debug/app-development-debug.apk",
        tests_apk_path: "app/build/outputs/apk/androidTest/development/debug/app-development-debug-androidTest.apk",
        build_tools_version: build_tools_version,
        output_directory: "fastlane/app/metadata/android",
        skip_open_summary: false,
        launch_arguments: ["annotation #{get_env("PACKAGE_NAME")}.ScreenshotOnly"],
        exit_on_test_failure: true,
        reinstall_app: false
      )
  end

  def notify_app_update(subject, message)
    postmark(
      subject: subject,
      message_text: message
    )
  end   

  # You must: `brew install graphicsmagick` to install the GraphicsMagick library as required by `appicon` action
  # You must `brew install librsvg` to install RSVG as required by `add_badge` action
  lane :generate_icons do    
    app_icon_path = "./fastlane/icons/icon.jpg"

    android_appicon(
      appicon_image_file: app_icon_path,
      appicon_icon_types: [:launcher],
      appicon_path: 'app/src/main/res/mipmap'
    )

    badge = env[:app_icon_badge]
    if badge != "no"
      add_badge(
        glob: "/**/app/src/main/res/mipmap-**/ic_launcher.png",
        dark: false, # add a dark badge instead of white one.
        alpha: badge == "alpha", # uses "alpha" text instead of "beta"
        badge_gravity: "SouthEast" # where to position the badge 
      )
    end
  end  
end
