beta_package_name = "com.levibostian.androidblanky.beta"
prod_package_name = "com.levibostian.androidblanky"
slack_room_url = "https://hooks.slack.com/services/..."
gitRepo = "git@github.com:levibostian/AndroidBlanky.git"

fastlane_version "2.97.0"
default_platform :android

platform :android do
  before_all do
    ENV["SLACK_URL"] = slack_room_url
  end

  desc "Runs all tests. UI, Unit, all of em."
    lane :test_all do
      test()
      android_tests()
      notification(subtitle: "Tests PASS!", message: "Tests PASS!")
    end

  desc "Runs all unit tests"
  lane :test do
    gradle(task: "testDevelopmentDebugUnitTest")
    notification(subtitle: "Tests PASS!", message: "Tests PASS!")
  end

  desc "Run Android tests while also taking screenshots"
  lane :android_test do
    # gradle(task: "clean")
    gradle(task: "assemble", flavor: "Development", build_type: "Debug")
    gradle(task: "assembleDevelopmentDebugAndroidTest")
    screengrab
    notification(subtitle: "UI Tests PASS!", message: "UI Tests PASS!")
  end

  desc "Submit beta build to the Play Store"
  lane :beta do
    changelog = File.read("./release_notes.txt")
    android_set_version_code(version_code: Time.now.to_i)
    File.open('metadata/android/en-US/app/changelogs/' + android_get_version_code().to_s + '.txt', 'w') { |file| file.write(changelog) }

    gradle(task: ":app:bundleBetaRelease")

    upload_to_play_store(aab: "app/build/outputs/bundle/betaRelease/app.aab",
               mapping: 'app/build/outputs/mapping/beta/release/mapping.txt',
               package_name: beta_package_name,
               metadata_path: "./fastlane/metadata/android/en-US/app/",
               json_key: './fastlane/metadata/google_play_dev.json',
               track: 'beta')

    add_git_tag(tag: android_get_version_name() + "-beta_" + android_get_version_code(), message: changelog)
    push_git_tags(remote: gitRepo)
    slack(message: "Beta release " + beta_package_name + " to the Play Store successful!")
  end

  desc "Submit production build to the Play Store"
  lane :production do
    changelog = File.read("./release_notes.txt")
    android_set_version_code(version_code: Time.now.to_i)
    File.open('metadata/android/en-US/app/changelogs/' + android_get_version_code().to_s + '.txt', 'w') { |file| file.write(changelog) }

    gradle(task: ":app:bundleProductionRelease")

    upload_to_play_store(aab: "app/build/outputs/bundle/productionRelease/app.aab",
               mapping: 'app/build/outputs/mapping/production/release/mapping.txt',
               package_name: prod_package_name,
               metadata_path: "./fastlane/metadata/android/en-US/app/",
               json_key: './fastlane/metadata/google_play_dev.json',
               track: 'production')

    add_git_tag(tag: android_get_version_name() + "_" + android_get_version_code(), message: changelog)
    push_git_tags(remote: gitRepo)
    slack(message: "Prod release " + prod_package_name + " to the Play Store successful!")
  end

  lane :app_icon do
    android_appicon(appicon_image_file: 'fastlane/metadata/android/en-US/app/images/icon.png',
      appicon_devices: [:phone, :tablet],
      appicon_path: 'app/src/main/res/mipmap')
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end