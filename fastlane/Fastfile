# ----- Edit below values ---------

name_of_app = "AndroidBlanky"
package_name = "com.levibostian.androidblanky"
beta_package_name = "#{package_name}.beta"
prod_package_name = package_name
github_repo_slug = "levibostian/AndroidBlanky"
build_tools_version = "28.0.3"
locales = ["en-US"]
mailgun_postmaster_email = "postmaster@yourdomain.com"
mailgun_api_key_for_domain = "key-12345"
admin_email = "youremail@you.com"

# ---------------------------------

fastlane_version "2.101.0"
default_platform :android
git_repo = "git@github.com:#{github_repo_slug}.git"

## 
# use: emailAdmin(
#   subject: "this is subject",
#   message: "this is message",
#   attachments: ["path/to/file"]
# )
# 
# You can omit attachments param
def emailAdmin(params)
  mailgun(
    postmaster: mailgun_postmaster_email,
    apikey: mailgun_api_key_for_domain,
    to: admin_email,
    from: "#{name_of_app} Fastlane bot",
    app_link: "https://github.com/#{github_repo_slug}",
    success: params[:success] || true,
    subject: params[:subject],
    message: params[:message],
    attachment: params[:attachments] || []
  )
end 

platform :android do
  before_all do
    ENV["RELEASE"] = "true"
  end
  
  desc "Submit beta build to the Play Store"
  lane :beta do
    changelog = File.read("../release_notes.txt")
    android_set_version_code(version_code: Time.now.to_i)
    File.open('metadata/android/en-US/app/changelogs/' + android_get_version_code().to_s + '.txt', 'w') { |file| file.write(changelog) }

    gradle(task: ":app:bundleBetaRelease")

    upload_to_play_store(aab: "app/build/outputs/bundle/betaRelease/app.aab",
               mapping: 'app/build/outputs/mapping/beta/release/mapping.txt',
               package_name: beta_package_name,
               metadata_path: "./fastlane/metadata/android/en-US/app/",
               json_key: './fastlane/metadata/google_play_dev.json',
               track: 'beta')

    add_git_tag(tag: android_get_version_name() + "-beta_" + android_get_version_code(), message: changelog)
    push_git_tags(remote: git_repo)
    
    emailAdmin(
      subject: "Beta app released successfully",
      message: "Beta release " + beta_package_name + " to the Play Store successful!")
  end

  desc "Submit production build to the Play Store"
  lane :production do
    changelog = File.read("../release_notes.txt")
    android_set_version_code(version_code: Time.now.to_i)
    File.open('metadata/android/en-US/app/changelogs/' + android_get_version_code().to_s + '.txt', 'w') { |file| file.write(changelog) }

    gradle(task: ":app:bundleProductionRelease")

    upload_to_play_store(aab: "app/build/outputs/bundle/productionRelease/app.aab",
               mapping: 'app/build/outputs/mapping/production/release/mapping.txt',
               package_name: prod_package_name,
               metadata_path: "./fastlane/metadata/android/en-US/app/",
               json_key: './fastlane/metadata/google_play_dev.json',
               track: 'production')

    add_git_tag(tag: android_get_version_name() + "_" + android_get_version_code(), message: changelog)
    push_git_tags(remote: git_repo)

    emailAdmin(
      subject: "Production app released successfully",
      message: "Production release " + prod_package_name + " to the Play Store successful!")    
  end

  desc "Create screenshots used for the Play Store"
    lane :create_screenshots do
      capture_android_screenshots(
        locales: locales,
        clear_previous_screenshots: true,
        app_apk_path: "app/build/outputs/apk/development/debug/app-development-debug.apk",
        tests_apk_path: "app/build/outputs/apk/androidTest/development/debug/app-development-debug-androidTest.apk",
        build_tools_version: build_tools_version,
        output_directory: "fastlane/app/metadata/android",
        skip_open_summary: false,
        launch_arguments: ["annotation #{package_name}.ScreenshotOnly"],
        exit_on_test_failure: true,
        reinstall_app: false
      )
  end

  error do |lane, exception|
    emailAdmin(
      subject: "Error: #{name_of_app} Fastlane bot",
      message: exception.message,
      success: false 
    )
  end
end
