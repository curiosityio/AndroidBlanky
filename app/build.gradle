buildscript {
    repositories {
        maven { url 'http://s3.amazonaws.com/fabric-artifacts/public' }
        mavenCentral()
    }
    dependencies {
        // latest version is found here: https://s3.amazonaws.com/fabric-artifacts/public/io/fabric/tools/gradle/maven-metadata.xml
        classpath 'io.fabric.tools:gradle:1.21.6'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'
apply plugin: 'android-apt'
apply plugin: 'kotlin-kapt'

repositories {
    maven { url 'http://s3.amazonaws.com/fabric-artifacts/public' }
    mavenCentral()
    maven { url 'https://maven.google.com' }
}

//apply plugin: 'com.getkeepsafe.dexcount'

// allows developer to set the minSdk via gradle command line during development. API 21+ are faster.
// so use 21+ during dev, then prod builds will still be built with 16 as don't have command line.
def minSdk = hasProperty('minSdk') ? minSdk : 16
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        applicationId "com.levibostian.androidblanky"
        minSdkVersion minSdk
        targetSdkVersion 26
        versionCode 1
        versionName "0.1.0"

        //multiDexEnabled true // don't need as not over dex limit yet.
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        releaseSigning {
            // NOTE: Uncomment below when building for the Play store. Had to comment out to get Gradle to sync.
            // Don't forget to also uncomment buildTypes > release > signingConfig.
//            storeFile file(System.getenv("ANDROID_KEYSTORE"))
//            storePassword System.console().readLine("\nStore password: ")
//            keyAlias System.getenv("ANDROID_KEYALIAS")
//            keyPassword System.console().readLine("Key password: ")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // NOTE: Uncomment below when buliding for the Play store.
            //signingConfig signingConfigs.releaseSigning
        }
    }

    productFlavors {
        development {
            applicationId "com.levibostian.androidblanky.debug"
        }

        production {
        }

        beta {
            applicationId "com.levibostian.androidblanky.beta"
        }
    }
}

// Code found from https://github.com/plastiv/CrashlyticsDemo used to build app on CI.
afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: crashlyticsdemoApisecret)
            entry(key: "apiKey", value: crashlyticsdemoApikey)
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    def latestSupportLibsVersion = '26.0.0'
    def retrofitVersion = '2.3.0'
    def rxbindingVersion = '2.0.0'

    compile "com.android.support:appcompat-v7:$latestSupportLibsVersion"
    compile "com.android.support:design:$latestSupportLibsVersion"
    compile "com.android.support:support-v4:$latestSupportLibsVersion"
    compile "com.android.support:recyclerview-v7:$latestSupportLibsVersion"
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // compile 'jp.wasabeef:glide-transformations:2.0.2'
    compile 'com.squareup.moshi:moshi:1.5.0'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    compile 'io.reactivex.rxjava2:rxjava:2.1.3'
    compile 'io.reactivex.rxjava2:rxandroid:1.2.1'
    compile "io.reactivex.rxjava2:rxkotlin:2.1.0"
    compile "com.jakewharton.rxbinding2:rxbinding:$rxbindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rxbindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxbindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rxbindingVersion"
    compile "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rxbindingVersion"
    kapt 'com.google.dagger:dagger-compiler:2.8'
    compile 'com.google.dagger:dagger:2.8'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'io.realm:android-adapters:2.0.0'
    compile 'com.github.curiosityio:wendy:bc5dcadbfd'
    compile 'com.github.kayvannj:PermissionUtil:1.0.4'
    compile 'com.evernote:android-job:1.1.3'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'

    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true;
    }

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
