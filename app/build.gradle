def versionMajor = 0
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

buildscript {
    repositories {
        maven { url 'http://s3.amazonaws.com/fabric-artifacts/public' }
        mavenCentral()
    }
    dependencies {
        // latest version is found here: https://s3.amazonaws.com/fabric-artifacts/public/io/fabric/tools/gradle/maven-metadata.xml
        classpath 'io.fabric.tools:gradle:1.23.0'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'
apply plugin: 'android-apt'
apply plugin: 'kotlin-kapt'

repositories {
    maven { url 'http://s3.amazonaws.com/fabric-artifacts/public' }
    mavenCentral()
    maven { url 'https://maven.google.com' }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        applicationId rootProject.ext.rootPackageName
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner 'com.levibostian.androidblanky.AndroidTestTestRunner'

        //multiDexEnabled true // don't need as not over dex limit yet.
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        releaseSigning {
            storeFile rootProject.file('keystores/keystore-name.keystore')
            storePassword 'password'
            keyAlias 'android-blanky'
            keyPassword 'password'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            signingConfig signingConfigs.releaseSigning
        }
    }

    flavorDimensions "mode"

    productFlavors {
        development {
            dimension "mode"
            applicationIdSuffix ".debug"
        }

        production {
            dimension "mode"
        }

        beta {
            dimension "mode"
            applicationIdSuffix ".beta"
        }
    }

    testOptions {
        animationsDisabled = true
    }
}

// Code found from https://github.com/plastiv/CrashlyticsDemo used to build app on CI.
afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: crashlyticsdemoApisecret)
            entry(key: "apiKey", value: crashlyticsdemoApikey)
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    // Support libraries
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    // Architecture components
    implementation "android.arch.lifecycle:runtime:$rootProject.architectureComponentsVersion"
    implementation "android.arch.lifecycle:extensions:$rootProject.architectureComponentsVersion"
    kapt "android.arch.lifecycle:compiler:$rootProject.architectureComponentsVersion"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.rxkotlinVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.rxbindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rootProject.rxbindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rootProject.rxbindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rootProject.rxbindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rootProject.rxbindingVersion"
    implementation "com.f2prateek.rx.preferences2:rx-preferences:$rootProject.rxPreferencesVersion"

    // Retrofit
    implementation "com.squareup.moshi:moshi:$rootProject.moshiVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit-mock:$rootProject.retrofitVersion"

    // Realm
    implementation "io.realm:android-adapters:$rootProject.realmAdaptersVersion"

    // Eventbus
    implementation "org.greenrobot:eventbus:$rootProject.eventbusVersion"

    // Khronos (Kotlin date extensions)
    implementation "com.github.hotchemi:khronos:$rootProject.khronosVersion"

    // Custom views
    implementation "com.github.curiosityio.androidviews:loadingemptyviews:$rootProject.androidViewsVersion"

    // Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:$rootProject.crashlyticsVersion@aar") {
        transitive = true;
    }

    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "com.google.truth:truth:$rootProject.googleTruthVersion", {
        exclude group: 'com.google.errorprone'
    }
    testImplementation "android.arch.core:core-testing:$rootProject.architectureComponentsVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "io.reactivex:rxjava:1.3.0" // requirement for realm.
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:$rootProject.mockitoKotlinVersion", { exclude group: 'org.jetbrains.kotlin' }

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.runnerVersion"
    androidTestImplementation "android.arch.core:core-testing:$rootProject.architectureComponentsVersion"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"
    androidTestImplementation "com.nhaarman:mockito-kotlin-kt1.1:$rootProject.mockitoKotlinVersion", { exclude group: 'org.jetbrains.kotlin' }
    androidTestImplementation "com.google.truth:truth:$rootProject.googleTruthVersion", {
        exclude group: 'com.google.errorprone'
    }

    // Espresso UI Testing
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion") {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:$rootProject.uiautomatorVersion"
    androidTestImplementation "tools.fastlane:screengrab:$rootProject.fastlaneScreengrabVersion"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    androidTestImplementation "com.android.support:design:$rootProject.supportLibraryVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}