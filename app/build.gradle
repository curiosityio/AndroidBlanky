apply plugin: 'com.android.application'
if (env.DEVELOPMENT != "true") {
    apply plugin: 'com.google.firebase.firebase-perf'
}

apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "org.jmailen.kotlinter"

// https://github.com/jeremymailen/kotlinter-gradle#configuration
kotlinter {
    disabledRules = ["no-wildcard-imports"]
}

androidExtensions {
    experimental = true
}

android {
    // This needs to be updated in .travis, too
    compileSdkVersion 29    
    buildToolsVersion "29.0.2" 

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        applicationId "${env.APPLICATION_ID}"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1528215515
        versionName "0.1.0"

        testInstrumentationRunner "com.app.AndroidTestTestRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    signingConfigs {
        releaseSigning {
            storeFile rootProject.file('keystores/keystore-name.keystore')
            storePassword 'password'
            keyAlias 'android-blanky'
            keyPassword 'password'
        }
    }

    buildTypes {
        debug {
            defaultConfig.minSdkVersion 23
            defaultConfig.multiDexEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            signingConfig signingConfigs.releaseSigning
        }
    }

    testOptions {
        animationsDisabled = true
        // robolectric: http://robolectric.org/getting-started/
        unitTests.includeAndroidResources = true
    }
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())

        // Put code into below directory that you want shared between unit and integration tests.
        String sharedTestDir = 'src/sharedTest/java'
        test.java.srcDirs += sharedTestDir
        androidTest.java.srcDirs += sharedTestDir
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // AndroidX UI libs
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    debugImplementation 'androidx.fragment:fragment-testing:1.2.5'
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'androidx.preference:preference:1.1.1'

    // multidex support for android sdk versions below v21
    implementation "androidx.multidex:multidex:2.0.1"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"

    // Teller
    implementation 'com.github.levibostian:Teller-Android:6f2ec8b3ba'

    // Wendy
    implementation 'com.github.levibostian:Wendy-Android:b14c06c7f0'

    // WorkManager
    def work_version = "2.3.4"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.4.4'
    implementation 'com.google.firebase:firebase-perf:19.0.7'
    implementation 'com.google.firebase:firebase-messaging:20.2.3'
    implementation 'com.google.firebase:firebase-crashlytics:17.1.1'
    implementation 'com.google.firebase:firebase-config-ktx:19.2.0'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx:19.1.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:17.4.4' // required for remote config, dynamic links

    // Boquila - remote config
    def boquila_version = "1.0.0-alpha.1"
    implementation "com.levibostian.boquila:boquila:$boquila_version"
    implementation "com.levibostian.boquila:moshi-boquila-plugin:$boquila_version"
    implementation "com.levibostian.boquila:firebase-boquila-adapter:$boquila_version"
    androidTestImplementation "com.levibostian.boquila:boquila-testing:$boquila_version"

    // Coil
    implementation 'io.coil-kt:coil:0.11.0'

    // Custom views
    implementation 'com.levibostian.swapper:swapper:0.1.0'
    implementation 'com.levibostian.pleasehold:pleasehold:0.1.0'
    implementation 'com.levibostian.empty:empty:0.1.0'

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0" // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-common-java8:2.2.0" // lifecycle compiler for java8
    implementation "androidx.lifecycle:lifecycle-reactivestreams:2.2.0" // Rx support for LiveData
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.2.0"

    // Room
    def roomVersion = "2.2.5"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"

    // Dagger
    implementation 'com.google.dagger:dagger:2.28.1'
    kapt 'com.google.dagger:dagger-compiler:2.28.1'
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.28.1'
    kaptTest 'com.google.dagger:dagger-compiler:2.28.1'

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation "com.f2prateek.rx.preferences2:rx-preferences:2.0.0"

    // Moshi
    def moshiVersion = '1.9.3'
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"
    implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"

    // Retrofit
    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // OkHttp
    def okhttpVersion = '4.8.0'
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    // JUnit
    def junitVersion = '4.13'
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test.ext:junit:1.1.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

    // Truth
    testImplementation "com.google.truth:truth:1.0.1"
    androidTestImplementation "com.google.truth:truth:1.0.1"
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    testImplementation 'androidx.test.ext:truth:1.2.0'

    // Mockito
    def mockitoVersion = '3.3.3'
    def mockitoKotlinVersion = '2.2.0'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion", {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion", {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }

    // Robolectric
    testImplementation 'org.robolectric:robolectric:4.3.1'

    // Android Testing Support Library's runner and rules
    def androidTestLibVersion = "1.2.0"
    androidTestImplementation "androidx.test:core:$androidTestLibVersion"
    androidTestImplementation "androidx.test:runner:$androidTestLibVersion"
    androidTestImplementation "androidx.test:rules:$androidTestLibVersion"
    testImplementation "androidx.test:core:$androidTestLibVersion"
    testImplementation "androidx.test:runner:$androidTestLibVersion"
    testImplementation "androidx.test:rules:$androidTestLibVersion"

    // Espresso UI Testing
    def espressoVersion = '3.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    // androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    // androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    // testImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    // testImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    testImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    // Fastlane screengrab
    androidTestImplementation "tools.fastlane:screengrab:1.2.0"
    testImplementation "tools.fastlane:screengrab:1.2.0"

    // Firebase screenshots
    androidTestImplementation(name:'cloudtestingscreenshotter_lib', ext:'aar')
    testImplementation(name:'cloudtestingscreenshotter_lib', ext:'aar')
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }
}
// enable java8, from: https://coil-kt.github.io/coil/getting_started/#java-8
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task generateEnv(type:Exec) {
    workingDir '../'
    commandLine './generate_env.sh'
}
preBuild.dependsOn generateEnv

apply plugin: 'com.google.gms.google-services'